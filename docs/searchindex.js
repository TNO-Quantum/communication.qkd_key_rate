Search.setIndex({"docnames": ["index", "qkd_key_rate", "qkd_key_rate.base", "qkd_key_rate.base.config", "qkd_key_rate.base.corrector", "qkd_key_rate.base.detector", "qkd_key_rate.base.keyrate", "qkd_key_rate.base.message", "qkd_key_rate.base.parity_strategy", "qkd_key_rate.base.permutations", "qkd_key_rate.base.receiver", "qkd_key_rate.base.schedule", "qkd_key_rate.base.sender", "qkd_key_rate.protocols", "qkd_key_rate.protocols.classical", "qkd_key_rate.protocols.classical.cascade", "qkd_key_rate.protocols.classical.privacy_amplification", "qkd_key_rate.protocols.classical.winnow", "qkd_key_rate.protocols.quantum", "qkd_key_rate.protocols.quantum.bb84", "qkd_key_rate.protocols.quantum.bb84_single_photon", "qkd_key_rate.protocols.quantum.bbm92", "qkd_key_rate.utils", "qkd_key_rate.utils.entropy", "qkd_key_rate.utils.required_linktime"], "filenames": ["index.rst", "qkd_key_rate.rst", "qkd_key_rate.base.rst", "qkd_key_rate.base.config.rst", "qkd_key_rate.base.corrector.rst", "qkd_key_rate.base.detector.rst", "qkd_key_rate.base.keyrate.rst", "qkd_key_rate.base.message.rst", "qkd_key_rate.base.parity_strategy.rst", "qkd_key_rate.base.permutations.rst", "qkd_key_rate.base.receiver.rst", "qkd_key_rate.base.schedule.rst", "qkd_key_rate.base.sender.rst", "qkd_key_rate.protocols.rst", "qkd_key_rate.protocols.classical.rst", "qkd_key_rate.protocols.classical.cascade.rst", "qkd_key_rate.protocols.classical.privacy_amplification.rst", "qkd_key_rate.protocols.classical.winnow.rst", "qkd_key_rate.protocols.quantum.rst", "qkd_key_rate.protocols.quantum.bb84.rst", "qkd_key_rate.protocols.quantum.bb84_single_photon.rst", "qkd_key_rate.protocols.quantum.bbm92.rst", "qkd_key_rate.utils.rst", "qkd_key_rate.utils.entropy.rst", "qkd_key_rate.utils.required_linktime.rst"], "titles": ["TNO Quantum", "qkd_key_rate package", "qkd_key_rate.base package", "qkd_key_rate.base.config module", "qkd_key_rate.base.corrector module", "qkd_key_rate.base.detector module", "qkd_key_rate.base.keyrate module", "qkd_key_rate.base.message module", "qkd_key_rate.base.parity_strategy module", "qkd_key_rate.base.permutations module", "qkd_key_rate.base.receiver module", "qkd_key_rate.base.schedule module", "qkd_key_rate.base.sender module", "qkd_key_rate.protocols package", "qkd_key_rate.protocols.classical package", "qkd_key_rate.protocols.classical.cascade module", "qkd_key_rate.protocols.classical.privacy_amplification module", "qkd_key_rate.protocols.classical.winnow module", "qkd_key_rate.protocols.quantum package", "qkd_key_rate.protocols.quantum.bb84 module", "qkd_key_rate.protocols.quantum.bb84_single_photon module", "qkd_key_rate.protocols.quantum.bbm92 module", "qkd_key_rate.utils package", "qkd_key_rate.utils.entropy module", "qkd_key_rate.utils.required_linktime module"], "terms": {"provid": [0, 2, 5, 6, 24], "gener": [0, 2, 7, 9, 20, 21], "softwar": 0, "compon": 0, "aim": 0, "facilit": 0, "develop": 0, "applic": [0, 23], "thi": [0, 2, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "repositori": 0, "python": 0, "code": [0, 17, 19, 20], "comput": [0, 2, 4, 6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "optim": [0, 6, 18, 19, 20, 21, 22, 23], "protocol": [0, 1, 2, 4, 6, 8, 9, 11, 24], "paramet": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 24], "differ": [0, 2, 4, 15, 21], "distribut": [0, 19, 21], "The": [0, 2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "codebas": 0, "i": [0, 2, 4, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "base": [0, 1, 14, 15, 16, 17, 18, 19, 20, 21, 23], "follow": 0, "paper": [0, 19, 20], "attema": 0, "et": 0, "al": 0, "decoi": [0, 18, 19, 21], "state": [0, 18, 19, 20, 21], "bb84": [0, 1, 13, 18, 20, 21], "2021": 0, "doi": [0, 19, 20, 21], "10": [0, 2, 8, 16, 19, 20, 21], "1007": [0, 19, 20], "s11128": [0, 19, 20], "021": [0, 19, 20], "03078": [0, 19, 20], "0": [0, 2, 5, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], "ma": 0, "entangl": [0, 19, 21], "photon": [0, 2, 5, 18, 19, 20, 21], "sourc": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "2007": 0, "1103": [0, 21], "physreva": [0, 21], "76": [0, 21], "012307": [0, 21], "ar": [0, 2, 5, 6, 14, 15, 17, 18, 19, 20, 21], "being": [0, 21], "support": 0, "singl": [0, 2, 5, 10, 14, 15, 18, 19, 20], "bb84_single_photon": [0, 1, 13, 18], "bbm92": [0, 1, 13, 18], "classic": [0, 1, 13, 19], "error": [0, 2, 4, 5, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24], "correct": [0, 2, 4, 10, 12, 14, 15, 16, 17, 19, 24], "cascad": [0, 1, 2, 8, 13, 14, 24], "winnow": [0, 1, 2, 11, 13, 14, 24], "present": 0, "can": [0, 2, 4, 5, 6, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24], "determin": [0, 2, 8, 14, 15, 16, 17], "set": [0, 2, 3, 6, 8, 18, 19, 20, 21, 23], "need": [0, 2, 5, 14, 17], "obtain": [0, 14, 16, 18, 19, 21], "maximum": [0, 2, 9, 19], "exchang": 0, "sift": [0, 15, 18, 19, 21], "appli": [0, 2, 7, 14, 15], "privaci": [0, 14, 16, 17], "amplif": [0, 14, 16], "calcul": [0, 2, 4, 5, 8, 9, 14, 15, 17, 21, 23, 24], "secur": [0, 14, 16, 19, 21], "hash": [0, 2, 4, 14, 16], "function": [0, 2, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "modul": [0, 1, 2, 13, 14, 18, 22], "easili": 0, "pip": 0, "qkd_key_rat": 0, "demonstr": 0, "how": [0, 21], "specif": [0, 2, 4, 6, 7, 11, 14, 15, 17, 18, 19, 20, 21], "detector": [0, 1, 2, 6, 18, 19, 20, 21], "attenu": [0, 2, 6, 18, 19, 20, 21], "2": [0, 14, 17, 18, 19, 20, 21], "from": [0, 2, 5, 6, 7, 8, 15, 16, 17, 19, 20, 21], "import": [0, 15, 16, 17, 19, 20, 21], "bb84fullyasymptotickeyrateestim": [0, 1, 13, 18, 19], "test": [0, 19, 20, 21], "conftest": [0, 19, 20, 21], "standard_detector": [0, 19, 20, 21], "detector_bob": [0, 19, 20, 21], "customis": [0, 1, 2, 5, 19, 20, 21], "dark_count_r": [0, 2, 5, 19, 20, 21], "1e": [0, 18, 19, 20, 21], "8": [0, 15, 19, 20, 21], "polarization_drift": [0, 2, 5, 19, 20, 21], "error_detector": [0, 2, 5, 19, 20, 21], "1": [0, 2, 5, 7, 14, 15, 17, 18, 19, 20, 21, 22, 23], "efficiency_parti": [0, 2, 5, 19, 20, 21], "fully_asymptotic_key_r": [0, 19], "mu": [0, 2, 6, 18, 19, 20, 21], "optimize_r": [0, 1, 2, 6, 13, 18, 19, 20, 21], "usag": [0, 15, 16, 17, 19, 20, 21], "numpi": [0, 15, 17], "np": [0, 15, 17], "messag": [0, 1, 2, 4, 8, 9, 10, 12, 14, 15, 16, 17, 24], "permut": [0, 1, 2, 7, 10, 12, 14, 15, 17], "schedul": [0, 1, 2, 13, 14, 17], "winnowcorrector": [0, 1, 13, 14, 17], "winnowreceiv": [0, 1, 13, 14, 17], "winnowsend": [0, 1, 13, 14, 17], "error_r": [0, 2, 4, 8, 11, 15, 17, 24], "05": [0, 15, 17], "message_length": [0, 2, 7, 15, 16, 17, 24], "10000": [0, 17], "input_messag": [0, 15, 17], "random_messag": [0, 1, 2, 7, 16, 17], "error_messag": [0, 15, 17], "x": [0, 2, 6, 14, 15, 16, 17, 18, 19, 21], "random": [0, 2, 7, 9, 15, 17, 19, 21], "rand": [0, 15, 17], "els": [0, 15, 17], "schedule_from_error_r": [0, 1, 2, 11, 17], "number_of_pass": [0, 2, 8, 9, 13, 14, 15, 17], "sum": [0, 17, 18, 19, 21], "random_permut": [0, 1, 2, 9, 15, 17], "message_s": [0, 2, 8, 9, 15, 17], "alic": [0, 2, 4, 10, 14, 15, 17, 18, 19, 21], "bob": [0, 2, 4, 6, 14, 15, 17, 18, 19, 20, 21], "corrector": [0, 1, 2, 14, 15, 17], "summari": [0, 1, 2, 4, 13, 14, 15, 17], "correct_error": [0, 1, 2, 4, 10, 13, 14, 15, 17], "For": [0, 14, 15, 18, 19, 21, 23, 24], "more": [0, 6, 22, 23], "see": [0, 2, 5], "document": 0, "individu": [0, 14, 17, 21], "privacy_amplif": [0, 1, 13, 14], "content": 0, "mai": [0, 2, 8, 18, 20], "sole": 0, "compli": 0, "intern": 0, "export": 0, "control": 0, "law": 0, "initi": [1, 2, 6, 8, 14, 15, 17, 18, 19, 20, 21], "quantum": [1, 13, 15, 16, 17], "commun": [1, 2, 4, 14, 15, 16, 17, 19, 20, 21, 24], "kei": [1, 2, 4, 5, 6, 14, 16, 18, 19, 20, 21], "rate": [1, 2, 4, 5, 6, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24], "asymptotickeyrateestim": [1, 2, 6, 18, 19, 20, 21], "compute_r": [1, 2, 6, 13, 18, 19, 20, 21], "__init__": [1, 2, 4, 5, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "calculate_error_r": [1, 2, 4], "calculate_key_reconciliation_r": [1, 2, 4], "calculate_number_of_error": [1, 2, 4], "create_message_tag_pair": [1, 2, 4], "correctoroutputbas": [1, 2, 4, 15, 17], "input_alic": [1, 2, 4, 15, 17], "input_bob": [1, 2, 4, 15, 17], "input_error": [1, 2, 4, 15, 17], "key_reconciliation_r": [1, 2, 4, 14, 15, 17], "number_of_communication_round": [1, 2, 4, 15, 17], "number_of_exposed_bit": [1, 2, 4, 14, 15, 17], "output_alic": [1, 2, 4, 15, 17], "output_bob": [1, 2, 4, 15, 17], "output_error": [1, 2, 4, 15, 17], "output_length": [1, 2, 4, 15, 17], "from_fil": [1, 2, 5], "get_paramet": [1, 2, 5], "required_field": [1, 2, 5], "finitekeyrateestim": [1, 2, 6, 18, 19, 21], "apply_permut": [1, 2, 7], "length": [1, 2, 4, 5, 7, 9, 14, 16, 24], "pop": [1, 2, 7], "paritystrategi": [1, 2, 8, 15], "calculate_message_parity_strategi": [1, 2, 8], "get_start_block_s": [1, 2, 8], "__add__": [1, 2, 9], "__len__": [1, 2, 9], "calculate_inverted_permut": [1, 2, 9], "shorten_pass": [1, 2, 9], "receiverbas": [1, 2, 10, 14, 15, 17], "correct_individual_error": [1, 2, 10], "next_pass": [1, 2, 11, 13, 14, 17], "remaining_pass": [1, 2, 11], "senderbas": [1, 2, 10, 12, 14, 15, 17], "original_messag": [1, 2, 12], "config": [1, 2], "keyrat": [1, 2], "parity_strategi": [1, 2, 14, 15], "receiv": [1, 2, 4, 12, 14, 15, 16, 17], "sender": [1, 2, 10, 14, 15, 17], "cascadecorrector": [1, 13, 14, 15], "cascadereceiv": [1, 13, 14, 15], "cascadesend": [1, 13, 14, 15], "privacyamplif": [1, 13, 14, 16], "bb84asymptotickeyrateestim": [1, 13, 18, 19], "bb84finitekeyrateestim": [1, 13, 18, 19], "bb84singleasymptotickeyrateestim": [1, 13, 18, 20], "bbm92asymptotickeyrateestim": [1, 13, 18, 21], "bbm92finitekeyrateestim": [1, 13, 18, 21], "util": 1, "binary_entropi": [1, 22, 23], "one_minus_binary_entropi": [1, 22, 23], "entropi": [1, 14, 16, 22], "required_linktim": [1, 22], "get_effici": [1, 22, 24], "get_estimate_on_commun": [1, 22, 24], "init": 2, "object": [2, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17], "class": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21], "kwarg": [2, 6, 18, 19, 20, 21], "asymptot": [2, 6, 18, 19, 20, 21], "abstract": [2, 4, 6, 10], "given": [2, 4, 5, 6, 8, 14, 15, 16, 18, 19, 20, 21], "intens": [2, 6, 18, 19, 20, 21], "an": [2, 6, 8, 14, 15, 16, 17, 18, 19, 20, 21], "arraylik": [2, 6, 18, 19, 20, 21], "us": [2, 4, 5, 6, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 23], "float": [2, 4, 5, 6, 8, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24], "channel": [2, 6, 18, 19, 20, 21], "return": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "type": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "rais": [2, 5, 6, 18, 19, 20, 21], "valueerror": [2, 5, 6, 18, 19, 20, 21], "when": [2, 6, 15, 18, 19, 20, 21], "invalid": [2, 6, 18, 19, 20, 21], "dimens": [2, 6, 18, 19, 20, 21], "send": [2, 4, 12, 14, 15, 17, 20], "parti": [2, 4, 5, 10, 12, 14, 15, 17, 18, 19, 21], "static": [2, 4, 9], "message1": [2, 4], "message2": [2, 4], "between": [2, 4, 14, 15, 17, 18, 19, 21], "two": [2, 4, 9, 14, 15, 17, 18, 19, 21, 23, 24], "If": [2, 4, 5, 6, 18, 20, 21], "number": [2, 4, 5, 6, 8, 9, 11, 14, 15, 16, 17, 18, 19, 20, 21, 24], "bit": [2, 4, 7, 8, 10, 14, 15, 16, 17, 21], "shortest": [2, 4], "first": [2, 4, 14, 15, 17], "second": [2, 4, 5], "ratio": [2, 4], "over": [2, 4, 19, 21], "exposed_bit": [2, 4], "fals": [2, 4], "reconcili": [2, 4], "bool": [2, 4, 14, 15, 19], "true": [2, 4], "expos": [2, 4, 14, 17], "otherwis": [2, 4, 19], "output": [2, 4, 15, 17], "key_rat": [2, 4], "number_of_error": [2, 4], "detail_transcript": [2, 4], "her": [2, 4], "option": [2, 4, 5, 6, 8, 10, 12, 14, 15, 17, 18, 19, 20, 21, 24], "whether": [2, 4], "print": [2, 4], "detail": [2, 4], "transcript": [2, 4], "shared_kei": [2, 4], "prepar": [2, 4, 14, 17, 19], "tag": [2, 4], "pair": [2, 4, 19, 21], "publicli": [2, 4], "To": [2, 4, 21], "share": [2, 4], "secret": [2, 4], "contain": [2, 4, 10, 12, 14, 15, 17], "origin": [2, 4, 12, 14, 15, 17, 20], "befor": [2, 4, 5, 14, 15, 17, 18, 19], "after": [2, 4, 8, 14, 15, 17], "input": [2, 4, 6, 10, 12, 14, 15, 17, 18, 19, 20], "int": [2, 4, 6, 7, 8, 9, 11, 14, 15, 16, 17, 18, 19, 21, 24], "effici": [2, 4, 5, 8, 21, 24], "round": [2, 4, 14, 17, 24], "name": [2, 5, 10, 12, 14, 15, 17], "jitter_sourc": [2, 5], "jitter_detector": [2, 5], "dead_tim": [2, 5], "detection_window": [2, 5], "efficiency_system": [2, 5, 13, 18, 21], "122782758757646": [2, 5], "dark_count_frequ": [2, 5], "none": [2, 5, 6, 8, 9, 10, 12, 14, 15, 17, 18, 19, 20, 21, 24], "detection_frequ": [2, 5], "interv": [2, 5], "efficiency_detector": [2, 5], "abc": [2, 5], "estim": [2, 5, 6, 8, 14, 15, 16, 18, 19, 20, 21, 24], "initialis": [2, 5], "instanc": [2, 5, 18, 19, 20], "str": [2, 5, 7, 10, 12, 14, 15, 17, 19, 24], "label": [2, 5], "time": [2, 5, 15], "delai": [2, 5], "introduc": [2, 5, 17], "recoveri": [2, 5], "new": [2, 5, 8, 9, 14, 15, 17], "event": [2, 5, 19, 20, 21], "record": [2, 5], "window": [2, 5], "detect": [2, 5, 15, 19, 21], "side": [2, 5, 6, 18, 19, 20, 21], "without": [2, 5], "shift": [2, 5], "drift": [2, 5], "encod": [2, 5, 10, 12, 14, 15, 17], "dark": [2, 5], "count": [2, 5], "per": [2, 5, 14, 17, 19, 20], "total": [2, 5, 6, 8, 9, 18, 19, 20, 21], "relat": [2, 5, 21], "argument": [2, 5, 6], "both": [2, 5, 12, 14, 15, 17, 18, 19, 21], "thei": [2, 5, 14, 17], "must": [2, 5, 18, 19], "satisfi": [2, 5], "text": [2, 5], "frac": [2, 5], "cdot": [2, 5, 21], "same": [2, 5, 18, 21], "formula": [2, 5, 21], "specifi": [2, 5], "requir": [2, 5, 14, 15, 17, 24], "field": [2, 5], "miss": [2, 5], "assertionerror": [2, 5], "inconsist": [2, 5], "creat": [2, 5, 14, 17, 21], "current": [2, 5, 14, 15], "descript": [2, 5], "classmethod": [2, 5, 7, 9, 11], "path": [2, 5], "construct": [2, 5], "csv": [2, 5], "file": [2, 5], "list": [2, 5, 6, 7, 9, 10, 12, 14, 15, 17, 18, 19, 20, 21], "get": [2, 5, 11, 14, 15, 17], "all": [2, 5, 10, 12, 14, 15, 17, 18, 19, 20], "dict": [2, 5], "ani": [2, 5, 6, 18, 19, 20, 21], "finit": [2, 6, 18, 19, 21], "probability_basis_x": [2, 6, 18, 19, 21], "probability_basis_z": [2, 6, 18, 19, 21], "n_x": [2, 6, 18, 19, 21], "probabl": [2, 6, 18, 19, 20, 21], "each": [2, 6, 8, 10, 12, 14, 15, 17, 18, 19, 20, 21], "basi": [2, 6, 14, 16, 18, 19, 21], "z": [2, 6, 18, 19, 21], "puls": [2, 6, 14, 16, 18, 19, 20, 21], "gain": [2, 6, 18, 19, 20, 21], "pule": [2, 6], "properti": [2, 7, 11, 12], "union": [2, 7, 19], "index": [2, 7, 9, 11, 14, 15, 17], "remov": [2, 7, 14, 17], "sampling_fract": [2, 8, 13, 14, 15], "5": [2, 8, 15, 18, 19, 20, 21], "switch_after_pass": [2, 8, 13, 14, 15], "pariti": [2, 8, 9, 14, 15, 17], "strategi": [2, 8, 9], "In": [2, 8, 9, 14, 15, 17, 18, 19], "reason": [2, 8], "we": [2, 8, 14, 15, 16, 18, 19, 20, 21, 23], "chang": [2, 8], "our": [2, 8, 21], "block": [2, 8, 14, 15, 17], "some": [2, 8, 9], "pass": [2, 8, 9, 10, 11, 12, 14, 15, 17], "deal": [2, 8], "fraction": [2, 8], "string": [2, 8, 10, 14, 15, 16, 17], "sampl": [2, 8], "switch": [2, 8], "iter": [2, 8, 9, 11, 14, 17], "which": [2, 8, 9, 14, 15, 19, 20, 21], "doubl": [2, 8, 15], "size": [2, 8, 9, 14, 15, 19], "subsequ": [2, 8], "randomli": [2, 8, 19, 21], "size_blocks_par": [2, 8, 14, 15], "start": [2, 8, 14, 15, 17], "largest": [2, 8], "compat": [2, 8], "other": [2, 9, 17, 18, 19, 20, 21], "combin": [2, 9, 14, 15, 19, 21], "invert": [2, 9], "everi": [2, 9, 14, 17], "pass_idx": [2, 9], "max_length": [2, 9], "decreas": [2, 9], "adjust": [2, 9, 14, 16, 20], "accordingli": [2, 9], "discard": [2, 9, 14, 17], "larg": [2, 9], "indic": [2, 9, 14, 17, 21], "shorten": [2, 9], "entri": [2, 9], "onli": [2, 10, 14, 15, 17, 18, 19, 20, 21, 24], "avail": [2, 10, 12, 14, 15, 17], "assum": [2, 10, 14, 15, 17, 18, 19, 20], "have": [2, 10, 14, 15, 16, 17, 18, 19, 20, 21], "thu": [2, 10, 14, 15, 17], "main": [2, 10, 14, 15, 17], "routin": [2, 10, 14, 15, 17, 18, 19, 21], "find": [2, 6, 10, 11, 14, 17], "error_index": [2, 10], "flip": [2, 10], "locat": [2, 10, 21], "next": [2, 11, 14, 15, 17], "updat": [2, 11], "process": [2, 11, 14, 17, 19], "describ": [2, 11], "ham": [2, 11, 17], "distanc": [2, 11, 18, 19, 21], "interact": [2, 11], "remain": [2, 11, 14, 16, 18, 20], "15": [2, 11], "partial": [2, 12], "uncorrect": [2, 12], "": [6, 18, 19, 20, 21], "depend": [6, 21], "suppli": 6, "x_0": [6, 18, 19, 20, 21], "bound": [6, 14, 15, 18, 19, 20, 21, 24], "achiev": [6, 17, 18, 21], "highest": 6, "possibl": [6, 15], "loss": [6, 14, 16, 18, 19, 20, 21], "db": [6, 18, 19, 20, 21], "search": [6, 18, 19, 20, 21], "valu": [6, 14, 15, 18, 19, 20, 21], "rang": [6, 15, 18, 19, 20, 21], "tupl": [6, 14, 15, 18, 19, 20, 21], "found": [6, 14, 15, 17, 18, 19, 20, 21], "neg": [6, 18, 19, 20, 21], "check_match_of_par": [13, 14, 15], "do_cascad": [13, 14, 15], "get_block_index": [13, 14, 15], "get_error_index": [13, 14, 15], "get_error_r": [13, 14, 15], "get_prior_error_r": [13, 14, 15], "build_parity_str": [13, 14, 15, 17], "get_par": [13, 14, 15, 17], "do_hash": [13, 14, 16], "get_entropy_estim": [13, 14, 16], "fix_errors_with_syndrom": [13, 14, 17], "build_syndrome_str": [13, 14, 17], "create_parity_check_matrix": [13, 14, 17], "disagreeing_block_par": [13, 14, 17], "discard_parity_bit": [13, 14, 17], "discard_syndrome_bit": [13, 14, 17], "first_pass": [13, 14, 17], "get_syndrom": [13, 14, 17], "permute_buff": [13, 14, 17], "cascadecorrectoroutput": [13, 14, 15], "winnowcorrectoroutput": [13, 14, 17], "compute_last_positive_dist": [13, 18, 19, 21], "optimizationerror": [13, 18, 19], "bound_f": [13, 18, 19], "compute_gain_and_error_r": [13, 18, 19, 20, 21], "delta": [13, 18, 19, 21], "delta_ec": [13, 18, 19], "ensure_prob": [13, 18, 19], "lower_bound_matrix_gain": [13, 18, 19], "solve_finite_lp": [13, 18, 19], "solve_lp": [13, 18, 19], "efficiency_channel": [13, 18, 21], "current_pass": [14, 15], "current_block": [14, 15], "block_siz": [14, 15], "check": [14, 15, 17], "match": [14, 15], "multipl": [14, 15, 18, 19, 20], "boolean": [14, 15], "upper": [14, 15, 18, 19, 21, 24], "howev": [14, 15, 17, 19], "loos": [14, 15], "make": [14, 15], "difficult": [14, 15], "give": [14, 15, 21], "tighter": [14, 15], "techniqu": [14, 15], "previou": [14, 15], "becom": [14, 15], "appar": [14, 15], "later": [14, 15], "It": [14, 15, 17], "recurs": [14, 15], "long": [14, 15], "index_pass": [14, 15], "correspond": [14, 15, 17, 19, 21], "certain": [14, 15, 18, 19], "index_block": [14, 15, 17], "half": [14, 15, 21], "expect": [14, 15, 21], "posit": [14, 15, 18, 19, 21], "index_start": [14, 15, 17], "index_finish": [14, 15], "mainli": [14, 15], "debug": [14, 15], "purpos": [14, 15], "usual": [14, 15, 19], "consid": [14, 15, 18, 19, 21], "privat": [14, 15], "cannot": [14, 15], "end": [14, 15, 17], "pass_numb": [14, 15], "built": [14, 15], "index_end": [14, 15, 17], "take": [14, 15, 19, 21], "account": [14, 15, 19, 21], "substr": [14, 15, 17], "observed_pulses_basis_x": [14, 16], "error_rate_basis_x": [14, 16], "A": [14, 16, 18, 19, 21], "equal": [14, 16, 17], "byte": [14, 16, 19], "error_correction_loss": [14, 16], "amount": [14, 16, 17], "multipli": [14, 16], "sent": [14, 16, 18, 19, 21], "due": [14, 16, 18, 19, 21], "them": [14, 17, 21], "one": [14, 17, 18, 19, 21, 22, 23], "agre": [14, 17], "afterward": [14, 17], "syndrom": [14, 17], "keep": [14, 17], "track": [14, 17], "furthermor": [14, 17], "build": [14, 17], "disagre": [14, 17], "matrix": [14, 17], "compar": [14, 17], "done": [14, 17], "wai": [14, 17, 19], "separ": [14, 17], "result": [14, 17, 18, 19, 21], "j": [14, 17, 19], "These": [14, 15, 17, 20], "linearli": [14, 17], "independ": [14, 17], "column": [14, 17], "bad": [14, 17], "known": [14, 17], "No": [14, 17], "part": [14, 17, 19, 21], "henc": [14, 17, 20], "here": [14, 17], "perform": [14, 15, 17, 19, 20, 21], "necessari": [14, 17], "includ": [14, 17, 21], "bitstr": 15, "divid": 15, "repeat": 15, "where": [15, 19, 20, 21], "odd": 15, "case": [15, 17, 18, 19, 21], "even": 15, "still": [15, 19], "exist": 15, "shuffl": 15, "enough": 15, "high": [15, 21], "typic": [15, 16, 17, 19, 21], "exampl": [15, 16, 17, 19, 20, 21], "tno": [15, 16, 17, 19, 20, 21], "100000": 15, "_": 15, "34": 15, "data": [15, 17], "100": 16, "advantag": 17, "less": 17, "than": 17, "might": [17, 18, 19], "With": 17, "leak": 17, "inform": [17, 21], "potenti": [17, 19], "eavesdropp": [17, 19], "overcom": 17, "therebi": 17, "mainten": 17, "number_of_decoi": [18, 19], "situat": [18, 19], "fix": [18, 19], "last": [18, 19, 21], "sometim": [18, 19, 21], "outsid": [18, 19, 21], "valid": [18, 19, 21], "region": [18, 19, 21], "push": [18, 19, 21], "back": [18, 19, 21], "regim": [18, 19, 21], "happen": [18, 19], "lp": [18, 19], "problem": [18, 19], "unfeas": [18, 19], "slightli": [18, 19], "modifi": [18, 19, 21], "6": [18, 19], "attempt": [18, 19], "feasibl": [18, 19], "solv": [18, 19], "default": [18, 19, 20, 21], "midpoint": [18, 19], "ndarrai": [18, 19, 20, 21], "dtype": [18, 19, 20, 21], "float64": [18, 19, 20, 21], "solver": [18, 19], "unsuccess": [18, 19], "infeas": [18, 19], "made": [18, 19, 21], "number_of_puls": [18, 19, 21], "1000000000000": [18, 19, 21], "vari": [18, 19], "laser": [18, 19, 20], "should": [18, 19, 21], "order": [18, 19], "simultan": [18, 19], "so": [18, 19], "arg": [18, 19], "variabl": [18, 19, 21], "fulli": [18, 19], "vacuum": [18, 19], "safe": [18, 19, 20], "chosen": [18, 19, 20, 21], "9": [18, 19, 20], "save": [18, 20], "split": [18, 20], "attack": [18, 20], "imposs": [18, 20], "detector_alic": [18, 20, 21], "note": [18, 21], "place": [18, 21], "anywher": [18, 21], "effect": [18, 19, 21], "middl": [18, 21], "001": [18, 21], "qkd": [19, 20, 21], "reli": [19, 21], "produc": [19, 21], "choos": [19, 21], "predefin": [19, 21], "measur": [19, 21], "As": [19, 21], "non": [19, 21, 22, 23], "choic": [19, 21], "appropri": [19, 21], "kept": [19, 21], "public": [19, 21], "famou": [19, 21], "charl": 19, "bennett": 19, "gill": 19, "brassard": 19, "establish": 19, "call": 19, "four": 19, "alon": 19, "noiseless": 19, "oper": 19, "post": 19, "occur": 19, "three": 19, "infinit": 19, "becaus": 19, "simplifi": [19, 20], "instead": [19, 20], "work": 19, "user": [19, 21], "addit": 19, "six": 19, "linear": [19, 22, 23], "program": 19, "approach": [19, 20], "similar": [19, 20], "impos": 19, "degre": 19, "certainti": 19, "except": 19, "thrown": 19, "epsilon": [19, 21], "term": 19, "n_z": 19, "e1": [19, 21], "p_abort": 19, "abort": 19, "too": 19, "mani": 19, "p": [19, 21], "ensur": 19, "zero": [19, 22, 23], "throw": 19, "map": 19, "max_num_photon": 19, "lower": 19, "likeli": 19, "_supportsarrai": 19, "_nestedsequ": 19, "complex": 19, "target_vacuum": 19, "target_singl": 19, "probabilities_intensity_j": 19, "observed_count": 19, "epsilon_mu_j": 19, "epsilon_num_photons_m": 19, "epsilon_num_photons_m_in_basis_b": 19, "coeffici": 19, "cut": 19, "observ": 19, "b": [19, 21], "optimizeresult": 19, "usabl": 19, "n_0": 19, "n_1": 19, "ldot": 19, "n_m": 19, "m": 19, "delta_": 19, "deviat": [19, 21], "program_coeffici": 19, "e": [19, 22, 23], "g": 19, "product": [19, 21], "solut": 19, "wa": [19, 21], "analysi": 20, "most": 20, "propos": 20, "hard": 20, "practic": 20, "attun": 20, "much": 20, "know": 20, "against": 20, "pn": 20, "standard": [20, 21], "asymptotic_key_r": [20, 21], "straight": 20, "forward": 20, "close": [20, 22, 23], "express": 20, "seen": 21, "outcom": 21, "allow": 21, "exact": 21, "tunabl": 21, "let": 21, "you": 21, "directli": 21, "its": 21, "again": 21, "do": [21, 22, 23], "link": 21, "changeabl": 21, "tune": 21, "confid": 21, "attenuation_alic": 21, "attenuation_bob": 21, "half_mu": 21, "overal": 21, "coincid": 21, "pump": 21, "incorrect": 21, "error_background": 21, "background": 21, "intrins": 21, "hit": 21, "erron": 21, "rel": 21, "parametr": 21, "down": 21, "convers": 21, "pdc": 21, "n": 21, "lambda": 21, "transmitt": 21, "eta_n": 21, "eta_a": 21, "eta_b": 21, "eta_x": 21, "condit": 21, "emit": 21, "yield": 21, "_n": 21, "y_": 21, "0a": 21, "eta_": 21, "0b": 21, "0x": 21, "darkcount": 21, "contribut": 21, "q_n": 21, "y_n": 21, "q_": 21, "sum_": 21, "infti": 21, "qber": 21, "e_": 21, "e_n": 21, "below": 21, "implement": 21, "literatur": 21, "equival": 21, "better": 21, "precis": [21, 22, 23], "deriv": 21, "delta_bit": 21, "system": 21, "apparatu": 21, "binari": [22, 23], "h": [22, 23], "mathbb": [22, 23], "r": [22, 23], "rightarrow": [22, 23], "domain": [22, 23], "ha": [22, 23], "been": [22, 23], "extend": [22, 23], "proper": [22, 23], "constrain": [22, 23], "One": [22, 23], "minu": [22, 23], "stabil": 23, "defin": 23, "method": 24, "rough": 24}, "objects": {"": [[1, 0, 0, "-", "qkd_key_rate"]], "qkd_key_rate": [[2, 0, 0, "-", "base"], [13, 0, 0, "-", "protocols"], [22, 0, 0, "-", "utils"]], "qkd_key_rate.base": [[2, 1, 1, "", "AsymptoticKeyRateEstimate"], [2, 1, 1, "", "Corrector"], [2, 1, 1, "", "CorrectorOutputBase"], [2, 1, 1, "", "Detector"], [2, 1, 1, "", "FiniteKeyRateEstimate"], [2, 1, 1, "", "Message"], [2, 1, 1, "", "ParityStrategy"], [2, 1, 1, "", "Permutations"], [2, 1, 1, "", "ReceiverBase"], [2, 1, 1, "", "Schedule"], [2, 1, 1, "", "SenderBase"], [3, 0, 0, "-", "config"], [4, 0, 0, "-", "corrector"], [5, 0, 0, "-", "detector"], [6, 0, 0, "-", "keyrate"], [7, 0, 0, "-", "message"], [8, 0, 0, "-", "parity_strategy"], [9, 0, 0, "-", "permutations"], [10, 0, 0, "-", "receiver"], [11, 0, 0, "-", "schedule"], [12, 0, 0, "-", "sender"]], "qkd_key_rate.base.AsymptoticKeyRateEstimate": [[2, 2, 1, "", "compute_rate"]], "qkd_key_rate.base.Corrector": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "calculate_error_rate"], [2, 2, 1, "", "calculate_key_reconciliation_rate"], [2, 2, 1, "", "calculate_number_of_errors"], [2, 2, 1, "", "correct_errors"], [2, 2, 1, "", "create_message_tag_pair"], [2, 2, 1, "", "summary"]], "qkd_key_rate.base.CorrectorOutputBase": [[2, 3, 1, "", "input_alice"], [2, 3, 1, "", "input_bob"], [2, 3, 1, "", "input_error"], [2, 3, 1, "", "key_reconciliation_rate"], [2, 3, 1, "", "number_of_communication_rounds"], [2, 3, 1, "", "number_of_exposed_bits"], [2, 3, 1, "", "output_alice"], [2, 3, 1, "", "output_bob"], [2, 3, 1, "", "output_error"], [2, 3, 1, "", "output_length"]], "qkd_key_rate.base.Detector": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "customise"], [2, 2, 1, "", "from_file"], [2, 2, 1, "", "get_parameters"], [2, 3, 1, "", "required_fields"]], "qkd_key_rate.base.FiniteKeyRateEstimate": [[2, 2, 1, "", "compute_rate"]], "qkd_key_rate.base.Message": [[2, 2, 1, "", "apply_permutation"], [2, 4, 1, "", "length"], [2, 3, 1, "", "message"], [2, 2, 1, "", "pop"], [2, 2, 1, "", "random_message"]], "qkd_key_rate.base.ParityStrategy": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "calculate_message_parity_strategy"], [2, 2, 1, "", "get_start_block_size"]], "qkd_key_rate.base.Permutations": [[2, 2, 1, "", "__add__"], [2, 2, 1, "", "__len__"], [2, 2, 1, "", "calculate_inverted_permutations"], [2, 2, 1, "", "random_permutation"], [2, 2, 1, "", "shorten_pass"]], "qkd_key_rate.base.ReceiverBase": [[2, 2, 1, "", "__init__"], [2, 2, 1, "", "correct_errors"], [2, 2, 1, "", "correct_individual_error"]], "qkd_key_rate.base.Schedule": [[2, 2, 1, "", "next_pass"], [2, 4, 1, "", "remaining_passes"], [2, 2, 1, "", "schedule_from_error_rate"]], "qkd_key_rate.base.SenderBase": [[2, 2, 1, "", "__init__"], [2, 4, 1, "", "message"], [2, 4, 1, "", "original_message"]], "qkd_key_rate.base.corrector": [[4, 1, 1, "", "Corrector"], [4, 1, 1, "", "CorrectorOutputBase"]], "qkd_key_rate.base.corrector.Corrector": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "calculate_error_rate"], [4, 2, 1, "", "calculate_key_reconciliation_rate"], [4, 2, 1, "", "calculate_number_of_errors"], [4, 2, 1, "", "correct_errors"], [4, 2, 1, "", "create_message_tag_pair"], [4, 2, 1, "", "summary"]], "qkd_key_rate.base.corrector.CorrectorOutputBase": [[4, 3, 1, "", "input_alice"], [4, 3, 1, "", "input_bob"], [4, 3, 1, "", "input_error"], [4, 3, 1, "", "key_reconciliation_rate"], [4, 3, 1, "", "number_of_communication_rounds"], [4, 3, 1, "", "number_of_exposed_bits"], [4, 3, 1, "", "output_alice"], [4, 3, 1, "", "output_bob"], [4, 3, 1, "", "output_error"], [4, 3, 1, "", "output_length"]], "qkd_key_rate.base.detector": [[5, 1, 1, "", "Detector"]], "qkd_key_rate.base.detector.Detector": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "customise"], [5, 2, 1, "", "from_file"], [5, 2, 1, "", "get_parameters"], [5, 3, 1, "", "required_fields"]], "qkd_key_rate.base.keyrate": [[6, 1, 1, "", "AsymptoticKeyRateEstimate"], [6, 1, 1, "", "FiniteKeyRateEstimate"], [6, 1, 1, "", "KeyRate"]], "qkd_key_rate.base.keyrate.AsymptoticKeyRateEstimate": [[6, 2, 1, "", "compute_rate"]], "qkd_key_rate.base.keyrate.FiniteKeyRateEstimate": [[6, 2, 1, "", "compute_rate"]], "qkd_key_rate.base.keyrate.KeyRate": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "compute_rate"], [6, 2, 1, "", "optimize_rate"]], "qkd_key_rate.base.message": [[7, 1, 1, "", "Message"]], "qkd_key_rate.base.message.Message": [[7, 2, 1, "", "apply_permutation"], [7, 4, 1, "", "length"], [7, 3, 1, "", "message"], [7, 2, 1, "", "pop"], [7, 2, 1, "", "random_message"]], "qkd_key_rate.base.parity_strategy": [[8, 1, 1, "", "ParityStrategy"]], "qkd_key_rate.base.parity_strategy.ParityStrategy": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "calculate_message_parity_strategy"], [8, 2, 1, "", "get_start_block_size"]], "qkd_key_rate.base.permutations": [[9, 1, 1, "", "Permutations"]], "qkd_key_rate.base.permutations.Permutations": [[9, 2, 1, "", "__add__"], [9, 2, 1, "", "__len__"], [9, 2, 1, "", "calculate_inverted_permutations"], [9, 2, 1, "", "random_permutation"], [9, 2, 1, "", "shorten_pass"]], "qkd_key_rate.base.receiver": [[10, 1, 1, "", "ReceiverBase"]], "qkd_key_rate.base.receiver.ReceiverBase": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "correct_errors"], [10, 2, 1, "", "correct_individual_error"]], "qkd_key_rate.base.schedule": [[11, 1, 1, "", "Schedule"]], "qkd_key_rate.base.schedule.Schedule": [[11, 2, 1, "", "next_pass"], [11, 4, 1, "", "remaining_passes"], [11, 2, 1, "", "schedule_from_error_rate"]], "qkd_key_rate.base.sender": [[12, 1, 1, "", "SenderBase"]], "qkd_key_rate.base.sender.SenderBase": [[12, 2, 1, "", "__init__"], [12, 4, 1, "", "message"], [12, 4, 1, "", "original_message"]], "qkd_key_rate.protocols": [[14, 0, 0, "-", "classical"], [18, 0, 0, "-", "quantum"]], "qkd_key_rate.protocols.classical": [[14, 1, 1, "", "CascadeCorrector"], [14, 1, 1, "", "CascadeReceiver"], [14, 1, 1, "", "CascadeSender"], [14, 1, 1, "", "PrivacyAmplification"], [14, 1, 1, "", "WinnowCorrector"], [14, 1, 1, "", "WinnowReceiver"], [14, 1, 1, "", "WinnowSender"], [15, 0, 0, "-", "cascade"], [16, 0, 0, "-", "privacy_amplification"], [17, 0, 0, "-", "winnow"]], "qkd_key_rate.protocols.classical.CascadeCorrector": [[14, 2, 1, "", "summary"]], "qkd_key_rate.protocols.classical.CascadeReceiver": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "check_match_of_parities"], [14, 2, 1, "", "correct_errors"], [14, 2, 1, "", "do_cascade"], [14, 2, 1, "", "get_block_index"], [14, 2, 1, "", "get_error_index"], [14, 2, 1, "", "get_error_rate"], [14, 2, 1, "", "get_prior_error_rate"]], "qkd_key_rate.protocols.classical.CascadeSender": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "build_parity_string"], [14, 2, 1, "", "get_parity"]], "qkd_key_rate.protocols.classical.PrivacyAmplification": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "do_hash"], [14, 2, 1, "", "get_entropy_estimate"]], "qkd_key_rate.protocols.classical.WinnowCorrector": [[14, 2, 1, "", "summary"]], "qkd_key_rate.protocols.classical.WinnowReceiver": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "correct_errors"], [14, 2, 1, "", "fix_errors_with_syndrome"]], "qkd_key_rate.protocols.classical.WinnowSender": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "build_parity_string"], [14, 2, 1, "", "build_syndrome_string"], [14, 2, 1, "", "create_parity_check_matrix"], [14, 2, 1, "", "disagreeing_block_parities"], [14, 2, 1, "", "discard_parity_bits"], [14, 2, 1, "", "discard_syndrome_bits"], [14, 2, 1, "", "first_pass"], [14, 2, 1, "", "get_parity"], [14, 2, 1, "", "get_syndrome"], [14, 2, 1, "", "next_pass"], [14, 2, 1, "", "permute_buffer"]], "qkd_key_rate.protocols.classical.cascade": [[15, 1, 1, "", "CascadeCorrector"], [15, 1, 1, "", "CascadeCorrectorOutput"], [15, 1, 1, "", "CascadeReceiver"], [15, 1, 1, "", "CascadeSender"]], "qkd_key_rate.protocols.classical.cascade.CascadeCorrector": [[15, 2, 1, "", "summary"]], "qkd_key_rate.protocols.classical.cascade.CascadeCorrectorOutput": [[15, 3, 1, "", "number_of_passes"], [15, 3, 1, "", "sampling_fraction"], [15, 3, 1, "", "switch_after_pass"]], "qkd_key_rate.protocols.classical.cascade.CascadeReceiver": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "check_match_of_parities"], [15, 2, 1, "", "correct_errors"], [15, 2, 1, "", "do_cascade"], [15, 2, 1, "", "get_block_index"], [15, 2, 1, "", "get_error_index"], [15, 2, 1, "", "get_error_rate"], [15, 2, 1, "", "get_prior_error_rate"]], "qkd_key_rate.protocols.classical.cascade.CascadeSender": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "build_parity_string"], [15, 2, 1, "", "get_parity"]], "qkd_key_rate.protocols.classical.privacy_amplification": [[16, 1, 1, "", "PrivacyAmplification"]], "qkd_key_rate.protocols.classical.privacy_amplification.PrivacyAmplification": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "do_hash"], [16, 2, 1, "", "get_entropy_estimate"]], "qkd_key_rate.protocols.classical.winnow": [[17, 1, 1, "", "WinnowCorrector"], [17, 1, 1, "", "WinnowCorrectorOutput"], [17, 1, 1, "", "WinnowReceiver"], [17, 1, 1, "", "WinnowSender"]], "qkd_key_rate.protocols.classical.winnow.WinnowCorrector": [[17, 2, 1, "", "summary"]], "qkd_key_rate.protocols.classical.winnow.WinnowCorrectorOutput": [[17, 3, 1, "", "schedule"]], "qkd_key_rate.protocols.classical.winnow.WinnowReceiver": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "correct_errors"], [17, 2, 1, "", "fix_errors_with_syndrome"]], "qkd_key_rate.protocols.classical.winnow.WinnowSender": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "build_parity_string"], [17, 2, 1, "", "build_syndrome_string"], [17, 2, 1, "", "create_parity_check_matrix"], [17, 2, 1, "", "disagreeing_block_parities"], [17, 2, 1, "", "discard_parity_bits"], [17, 2, 1, "", "discard_syndrome_bits"], [17, 2, 1, "", "first_pass"], [17, 2, 1, "", "get_parity"], [17, 2, 1, "", "get_syndrome"], [17, 2, 1, "", "next_pass"], [17, 2, 1, "", "permute_buffer"]], "qkd_key_rate.protocols.quantum": [[18, 1, 1, "", "BB84AsymptoticKeyRateEstimate"], [18, 1, 1, "", "BB84FiniteKeyRateEstimate"], [18, 1, 1, "", "BB84FullyAsymptoticKeyRateEstimate"], [18, 1, 1, "", "BB84SingleAsymptoticKeyRateEstimate"], [18, 1, 1, "", "BBM92AsymptoticKeyRateEstimate"], [18, 1, 1, "", "BBM92FiniteKeyRateEstimate"], [19, 0, 0, "-", "bb84"], [20, 0, 0, "-", "bb84_single_photon"], [21, 0, 0, "-", "bbm92"]], "qkd_key_rate.protocols.quantum.BB84AsymptoticKeyRateEstimate": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_last_positive_distance"], [18, 2, 1, "", "compute_rate"], [18, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.BB84FiniteKeyRateEstimate": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_last_positive_distance"], [18, 2, 1, "", "compute_rate"], [18, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.BB84FullyAsymptoticKeyRateEstimate": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_rate"], [18, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.BB84SingleAsymptoticKeyRateEstimate": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_rate"], [18, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.BBM92AsymptoticKeyRateEstimate": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_rate"], [18, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.BBM92FiniteKeyRateEstimate": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "compute_last_positive_distance"], [18, 2, 1, "", "compute_rate"], [18, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.bb84": [[19, 1, 1, "", "BB84AsymptoticKeyRateEstimate"], [19, 1, 1, "", "BB84FiniteKeyRateEstimate"], [19, 1, 1, "", "BB84FullyAsymptoticKeyRateEstimate"], [19, 5, 1, "", "OptimizationError"], [19, 6, 1, "", "bound_f"], [19, 6, 1, "", "compute_gain_and_error_rate"], [19, 6, 1, "", "delta"], [19, 6, 1, "", "delta_ec"], [19, 6, 1, "", "ensure_probability"], [19, 6, 1, "", "lower_bound_matrix_gain"], [19, 6, 1, "", "solve_finite_lp"], [19, 6, 1, "", "solve_lp"]], "qkd_key_rate.protocols.quantum.bb84.BB84AsymptoticKeyRateEstimate": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "compute_last_positive_distance"], [19, 2, 1, "", "compute_rate"], [19, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.bb84.BB84FiniteKeyRateEstimate": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "compute_last_positive_distance"], [19, 2, 1, "", "compute_rate"], [19, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "compute_rate"], [19, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.bb84_single_photon": [[20, 1, 1, "", "BB84SingleAsymptoticKeyRateEstimate"], [20, 6, 1, "", "compute_gain_and_error_rate"]], "qkd_key_rate.protocols.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "compute_rate"], [20, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.bbm92": [[21, 1, 1, "", "BBM92AsymptoticKeyRateEstimate"], [21, 1, 1, "", "BBM92FiniteKeyRateEstimate"], [21, 6, 1, "", "compute_gain_and_error_rate"], [21, 6, 1, "", "delta"], [21, 6, 1, "", "efficiency_channel"], [21, 6, 1, "", "efficiency_system"]], "qkd_key_rate.protocols.quantum.bbm92.BBM92AsymptoticKeyRateEstimate": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "compute_rate"], [21, 2, 1, "", "optimize_rate"]], "qkd_key_rate.protocols.quantum.bbm92.BBM92FiniteKeyRateEstimate": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "compute_last_positive_distance"], [21, 2, 1, "", "compute_rate"], [21, 2, 1, "", "optimize_rate"]], "qkd_key_rate.utils": [[22, 6, 1, "", "binary_entropy"], [23, 0, 0, "-", "entropy"], [22, 6, 1, "", "one_minus_binary_entropy"], [24, 0, 0, "-", "required_linktime"]], "qkd_key_rate.utils.entropy": [[23, 6, 1, "", "binary_entropy"], [23, 6, 1, "", "one_minus_binary_entropy"]], "qkd_key_rate.utils.required_linktime": [[24, 6, 1, "", "get_efficiency"], [24, 6, 1, "", "get_estimate_on_communication"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:exception", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "titleterms": {"tno": 0, "quantum": [0, 18, 19, 20, 21], "commun": 0, "qkd": 0, "kei": 0, "rate": 0, "quick": 0, "instal": 0, "exampl": 0, "end": 0, "us": 0, "limit": 0, "qkd_key_rat": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "packag": [1, 2, 13, 14, 18, 22], "subpackag": [1, 13], "base": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], "config": 3, "modul": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 19, 20, 21, 23, 24], "corrector": 4, "detector": 5, "keyrat": 6, "messag": 7, "parity_strategi": 8, "permut": 9, "receiv": 10, "schedul": 11, "sender": 12, "protocol": [13, 14, 15, 16, 17, 18, 19, 20, 21], "classic": [14, 15, 16, 17], "cascad": 15, "privacy_amplif": 16, "winnow": 17, "bb84": 19, "bb84_single_photon": 20, "bbm92": 21, "util": [22, 23, 24], "entropi": 23, "required_linktim": 24}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"TNO Quantum": [[0, "tno-quantum"]], "TNO Quantum - Communication - QKD Key Rate": [[0, "tno-quantum-communication-qkd-key-rate"]], "Quick Install": [[0, "quick-install"]], "Examples": [[0, "examples"]], "(End)use Limitations": [[0, "end-use-limitations"]], "qkd_key_rate package": [[1, "module-qkd_key_rate"]], "Subpackages": [[1, "subpackages"], [13, "subpackages"]], "qkd_key_rate.base package": [[2, "module-qkd_key_rate.base"]], "qkd_key_rate.base.config module": [[3, "module-qkd_key_rate.base.config"]], "qkd_key_rate.base.corrector module": [[4, "module-qkd_key_rate.base.corrector"]], "qkd_key_rate.base.detector module": [[5, "module-qkd_key_rate.base.detector"]], "qkd_key_rate.base.keyrate module": [[6, "module-qkd_key_rate.base.keyrate"]], "qkd_key_rate.base.message module": [[7, "module-qkd_key_rate.base.message"]], "qkd_key_rate.base.parity_strategy module": [[8, "module-qkd_key_rate.base.parity_strategy"]], "qkd_key_rate.base.permutations module": [[9, "module-qkd_key_rate.base.permutations"]], "qkd_key_rate.base.receiver module": [[10, "module-qkd_key_rate.base.receiver"]], "qkd_key_rate.base.schedule module": [[11, "module-qkd_key_rate.base.schedule"]], "qkd_key_rate.base.sender module": [[12, "module-qkd_key_rate.base.sender"]], "qkd_key_rate.protocols package": [[13, "module-qkd_key_rate.protocols"]], "qkd_key_rate.protocols.classical package": [[14, "module-qkd_key_rate.protocols.classical"]], "qkd_key_rate.protocols.classical.cascade module": [[15, "module-qkd_key_rate.protocols.classical.cascade"]], "qkd_key_rate.protocols.classical.privacy_amplification module": [[16, "module-qkd_key_rate.protocols.classical.privacy_amplification"]], "qkd_key_rate.protocols.classical.winnow module": [[17, "module-qkd_key_rate.protocols.classical.winnow"]], "qkd_key_rate.protocols.quantum package": [[18, "module-qkd_key_rate.protocols.quantum"]], "qkd_key_rate.protocols.quantum.bb84 module": [[19, "module-qkd_key_rate.protocols.quantum.bb84"]], "qkd_key_rate.protocols.quantum.bb84_single_photon module": [[20, "module-qkd_key_rate.protocols.quantum.bb84_single_photon"]], "qkd_key_rate.protocols.quantum.bbm92 module": [[21, "module-qkd_key_rate.protocols.quantum.bbm92"]], "qkd_key_rate.utils package": [[22, "module-qkd_key_rate.utils"]], "qkd_key_rate.utils.entropy module": [[23, "module-qkd_key_rate.utils.entropy"]], "qkd_key_rate.utils.required_linktime module": [[24, "module-qkd_key_rate.utils.required_linktime"]]}, "indexentries": {"module": [[1, "module-qkd_key_rate"], [2, "module-qkd_key_rate.base"], [3, "module-qkd_key_rate.base.config"], [4, "module-qkd_key_rate.base.corrector"], [5, "module-qkd_key_rate.base.detector"], [6, "module-qkd_key_rate.base.keyrate"], [7, "module-qkd_key_rate.base.message"], [8, "module-qkd_key_rate.base.parity_strategy"], [9, "module-qkd_key_rate.base.permutations"], [10, "module-qkd_key_rate.base.receiver"], [11, "module-qkd_key_rate.base.schedule"], [12, "module-qkd_key_rate.base.sender"], [13, "module-qkd_key_rate.protocols"], [14, "module-qkd_key_rate.protocols.classical"], [15, "module-qkd_key_rate.protocols.classical.cascade"], [16, "module-qkd_key_rate.protocols.classical.privacy_amplification"], [17, "module-qkd_key_rate.protocols.classical.winnow"], [18, "module-qkd_key_rate.protocols.quantum"], [19, "module-qkd_key_rate.protocols.quantum.bb84"], [20, "module-qkd_key_rate.protocols.quantum.bb84_single_photon"], [21, "module-qkd_key_rate.protocols.quantum.bbm92"], [22, "module-qkd_key_rate.utils"], [23, "module-qkd_key_rate.utils.entropy"], [24, "module-qkd_key_rate.utils.required_linktime"]], "qkd_key_rate": [[1, "module-qkd_key_rate"]], "asymptotickeyrateestimate (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.AsymptoticKeyRateEstimate"]], "corrector (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.Corrector"]], "correctoroutputbase (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.CorrectorOutputBase"]], "detector (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.Detector"]], "finitekeyrateestimate (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.FiniteKeyRateEstimate"]], "message (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.Message"]], "paritystrategy (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.ParityStrategy"]], "permutations (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.Permutations"]], "receiverbase (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.ReceiverBase"]], "schedule (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.Schedule"]], "senderbase (class in qkd_key_rate.base)": [[2, "qkd_key_rate.base.SenderBase"]], "__add__() (qkd_key_rate.base.permutations method)": [[2, "qkd_key_rate.base.Permutations.__add__"]], "__init__() (qkd_key_rate.base.corrector method)": [[2, "qkd_key_rate.base.Corrector.__init__"]], "__init__() (qkd_key_rate.base.detector method)": [[2, "qkd_key_rate.base.Detector.__init__"]], "__init__() (qkd_key_rate.base.paritystrategy method)": [[2, "qkd_key_rate.base.ParityStrategy.__init__"]], "__init__() (qkd_key_rate.base.receiverbase method)": [[2, "qkd_key_rate.base.ReceiverBase.__init__"]], "__init__() (qkd_key_rate.base.senderbase method)": [[2, "qkd_key_rate.base.SenderBase.__init__"]], "__len__() (qkd_key_rate.base.permutations method)": [[2, "qkd_key_rate.base.Permutations.__len__"]], "apply_permutation() (qkd_key_rate.base.message method)": [[2, "qkd_key_rate.base.Message.apply_permutation"]], "calculate_error_rate() (qkd_key_rate.base.corrector static method)": [[2, "qkd_key_rate.base.Corrector.calculate_error_rate"]], "calculate_inverted_permutations() (qkd_key_rate.base.permutations static method)": [[2, "qkd_key_rate.base.Permutations.calculate_inverted_permutations"]], "calculate_key_reconciliation_rate() (qkd_key_rate.base.corrector method)": [[2, "qkd_key_rate.base.Corrector.calculate_key_reconciliation_rate"]], "calculate_message_parity_strategy() (qkd_key_rate.base.paritystrategy method)": [[2, "qkd_key_rate.base.ParityStrategy.calculate_message_parity_strategy"]], "calculate_number_of_errors() (qkd_key_rate.base.corrector static method)": [[2, "qkd_key_rate.base.Corrector.calculate_number_of_errors"]], "compute_rate() (qkd_key_rate.base.asymptotickeyrateestimate method)": [[2, "qkd_key_rate.base.AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.base.finitekeyrateestimate method)": [[2, "qkd_key_rate.base.FiniteKeyRateEstimate.compute_rate"]], "correct_errors() (qkd_key_rate.base.corrector method)": [[2, "qkd_key_rate.base.Corrector.correct_errors"]], "correct_errors() (qkd_key_rate.base.receiverbase method)": [[2, "qkd_key_rate.base.ReceiverBase.correct_errors"]], "correct_individual_error() (qkd_key_rate.base.receiverbase method)": [[2, "qkd_key_rate.base.ReceiverBase.correct_individual_error"]], "create_message_tag_pair() (qkd_key_rate.base.corrector static method)": [[2, "qkd_key_rate.base.Corrector.create_message_tag_pair"]], "customise() (qkd_key_rate.base.detector method)": [[2, "qkd_key_rate.base.Detector.customise"]], "from_file() (qkd_key_rate.base.detector class method)": [[2, "qkd_key_rate.base.Detector.from_file"]], "get_parameters() (qkd_key_rate.base.detector method)": [[2, "qkd_key_rate.base.Detector.get_parameters"]], "get_start_block_size() (qkd_key_rate.base.paritystrategy method)": [[2, "qkd_key_rate.base.ParityStrategy.get_start_block_size"]], "input_alice (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.input_alice"]], "input_bob (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.input_bob"]], "input_error (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.input_error"]], "key_reconciliation_rate (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.key_reconciliation_rate"]], "length (qkd_key_rate.base.message property)": [[2, "qkd_key_rate.base.Message.length"]], "message (qkd_key_rate.base.message attribute)": [[2, "qkd_key_rate.base.Message.message"]], "message (qkd_key_rate.base.senderbase property)": [[2, "qkd_key_rate.base.SenderBase.message"]], "next_pass() (qkd_key_rate.base.schedule method)": [[2, "qkd_key_rate.base.Schedule.next_pass"]], "number_of_communication_rounds (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.number_of_communication_rounds"]], "number_of_exposed_bits (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.number_of_exposed_bits"]], "original_message (qkd_key_rate.base.senderbase property)": [[2, "qkd_key_rate.base.SenderBase.original_message"]], "output_alice (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.output_alice"]], "output_bob (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.output_bob"]], "output_error (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.output_error"]], "output_length (qkd_key_rate.base.correctoroutputbase attribute)": [[2, "qkd_key_rate.base.CorrectorOutputBase.output_length"]], "pop() (qkd_key_rate.base.message method)": [[2, "qkd_key_rate.base.Message.pop"]], "qkd_key_rate.base": [[2, "module-qkd_key_rate.base"]], "random_message() (qkd_key_rate.base.message class method)": [[2, "qkd_key_rate.base.Message.random_message"]], "random_permutation() (qkd_key_rate.base.permutations class method)": [[2, "qkd_key_rate.base.Permutations.random_permutation"]], "remaining_passes (qkd_key_rate.base.schedule property)": [[2, "qkd_key_rate.base.Schedule.remaining_passes"]], "required_fields (qkd_key_rate.base.detector attribute)": [[2, "qkd_key_rate.base.Detector.required_fields"]], "schedule_from_error_rate() (qkd_key_rate.base.schedule class method)": [[2, "qkd_key_rate.base.Schedule.schedule_from_error_rate"]], "shorten_pass() (qkd_key_rate.base.permutations method)": [[2, "qkd_key_rate.base.Permutations.shorten_pass"]], "summary() (qkd_key_rate.base.corrector method)": [[2, "qkd_key_rate.base.Corrector.summary"]], "qkd_key_rate.base.config": [[3, "module-qkd_key_rate.base.config"]], "corrector (class in qkd_key_rate.base.corrector)": [[4, "qkd_key_rate.base.corrector.Corrector"]], "correctoroutputbase (class in qkd_key_rate.base.corrector)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase"]], "__init__() (qkd_key_rate.base.corrector.corrector method)": [[4, "qkd_key_rate.base.corrector.Corrector.__init__"]], "calculate_error_rate() (qkd_key_rate.base.corrector.corrector static method)": [[4, "qkd_key_rate.base.corrector.Corrector.calculate_error_rate"]], "calculate_key_reconciliation_rate() (qkd_key_rate.base.corrector.corrector method)": [[4, "qkd_key_rate.base.corrector.Corrector.calculate_key_reconciliation_rate"]], "calculate_number_of_errors() (qkd_key_rate.base.corrector.corrector static method)": [[4, "qkd_key_rate.base.corrector.Corrector.calculate_number_of_errors"]], "correct_errors() (qkd_key_rate.base.corrector.corrector method)": [[4, "qkd_key_rate.base.corrector.Corrector.correct_errors"]], "create_message_tag_pair() (qkd_key_rate.base.corrector.corrector static method)": [[4, "qkd_key_rate.base.corrector.Corrector.create_message_tag_pair"]], "input_alice (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.input_alice"]], "input_bob (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.input_bob"]], "input_error (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.input_error"]], "key_reconciliation_rate (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.key_reconciliation_rate"]], "number_of_communication_rounds (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.number_of_communication_rounds"]], "number_of_exposed_bits (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.number_of_exposed_bits"]], "output_alice (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.output_alice"]], "output_bob (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.output_bob"]], "output_error (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.output_error"]], "output_length (qkd_key_rate.base.corrector.correctoroutputbase attribute)": [[4, "qkd_key_rate.base.corrector.CorrectorOutputBase.output_length"]], "qkd_key_rate.base.corrector": [[4, "module-qkd_key_rate.base.corrector"]], "summary() (qkd_key_rate.base.corrector.corrector method)": [[4, "qkd_key_rate.base.corrector.Corrector.summary"]], "detector (class in qkd_key_rate.base.detector)": [[5, "qkd_key_rate.base.detector.Detector"]], "__init__() (qkd_key_rate.base.detector.detector method)": [[5, "qkd_key_rate.base.detector.Detector.__init__"]], "customise() (qkd_key_rate.base.detector.detector method)": [[5, "qkd_key_rate.base.detector.Detector.customise"]], "from_file() (qkd_key_rate.base.detector.detector class method)": [[5, "qkd_key_rate.base.detector.Detector.from_file"]], "get_parameters() (qkd_key_rate.base.detector.detector method)": [[5, "qkd_key_rate.base.detector.Detector.get_parameters"]], "qkd_key_rate.base.detector": [[5, "module-qkd_key_rate.base.detector"]], "required_fields (qkd_key_rate.base.detector.detector attribute)": [[5, "qkd_key_rate.base.detector.Detector.required_fields"]], "asymptotickeyrateestimate (class in qkd_key_rate.base.keyrate)": [[6, "qkd_key_rate.base.keyrate.AsymptoticKeyRateEstimate"]], "finitekeyrateestimate (class in qkd_key_rate.base.keyrate)": [[6, "qkd_key_rate.base.keyrate.FiniteKeyRateEstimate"]], "keyrate (class in qkd_key_rate.base.keyrate)": [[6, "qkd_key_rate.base.keyrate.KeyRate"]], "__init__() (qkd_key_rate.base.keyrate.keyrate method)": [[6, "qkd_key_rate.base.keyrate.KeyRate.__init__"]], "compute_rate() (qkd_key_rate.base.keyrate.asymptotickeyrateestimate method)": [[6, "qkd_key_rate.base.keyrate.AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.base.keyrate.finitekeyrateestimate method)": [[6, "qkd_key_rate.base.keyrate.FiniteKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.base.keyrate.keyrate method)": [[6, "qkd_key_rate.base.keyrate.KeyRate.compute_rate"]], "optimize_rate() (qkd_key_rate.base.keyrate.keyrate method)": [[6, "qkd_key_rate.base.keyrate.KeyRate.optimize_rate"]], "qkd_key_rate.base.keyrate": [[6, "module-qkd_key_rate.base.keyrate"]], "message (class in qkd_key_rate.base.message)": [[7, "qkd_key_rate.base.message.Message"]], "apply_permutation() (qkd_key_rate.base.message.message method)": [[7, "qkd_key_rate.base.message.Message.apply_permutation"]], "length (qkd_key_rate.base.message.message property)": [[7, "qkd_key_rate.base.message.Message.length"]], "message (qkd_key_rate.base.message.message attribute)": [[7, "qkd_key_rate.base.message.Message.message"]], "pop() (qkd_key_rate.base.message.message method)": [[7, "qkd_key_rate.base.message.Message.pop"]], "qkd_key_rate.base.message": [[7, "module-qkd_key_rate.base.message"]], "random_message() (qkd_key_rate.base.message.message class method)": [[7, "qkd_key_rate.base.message.Message.random_message"]], "paritystrategy (class in qkd_key_rate.base.parity_strategy)": [[8, "qkd_key_rate.base.parity_strategy.ParityStrategy"]], "__init__() (qkd_key_rate.base.parity_strategy.paritystrategy method)": [[8, "qkd_key_rate.base.parity_strategy.ParityStrategy.__init__"]], "calculate_message_parity_strategy() (qkd_key_rate.base.parity_strategy.paritystrategy method)": [[8, "qkd_key_rate.base.parity_strategy.ParityStrategy.calculate_message_parity_strategy"]], "get_start_block_size() (qkd_key_rate.base.parity_strategy.paritystrategy method)": [[8, "qkd_key_rate.base.parity_strategy.ParityStrategy.get_start_block_size"]], "qkd_key_rate.base.parity_strategy": [[8, "module-qkd_key_rate.base.parity_strategy"]], "permutations (class in qkd_key_rate.base.permutations)": [[9, "qkd_key_rate.base.permutations.Permutations"]], "__add__() (qkd_key_rate.base.permutations.permutations method)": [[9, "qkd_key_rate.base.permutations.Permutations.__add__"]], "__len__() (qkd_key_rate.base.permutations.permutations method)": [[9, "qkd_key_rate.base.permutations.Permutations.__len__"]], "calculate_inverted_permutations() (qkd_key_rate.base.permutations.permutations static method)": [[9, "qkd_key_rate.base.permutations.Permutations.calculate_inverted_permutations"]], "qkd_key_rate.base.permutations": [[9, "module-qkd_key_rate.base.permutations"]], "random_permutation() (qkd_key_rate.base.permutations.permutations class method)": [[9, "qkd_key_rate.base.permutations.Permutations.random_permutation"]], "shorten_pass() (qkd_key_rate.base.permutations.permutations method)": [[9, "qkd_key_rate.base.permutations.Permutations.shorten_pass"]], "receiverbase (class in qkd_key_rate.base.receiver)": [[10, "qkd_key_rate.base.receiver.ReceiverBase"]], "__init__() (qkd_key_rate.base.receiver.receiverbase method)": [[10, "qkd_key_rate.base.receiver.ReceiverBase.__init__"]], "correct_errors() (qkd_key_rate.base.receiver.receiverbase method)": [[10, "qkd_key_rate.base.receiver.ReceiverBase.correct_errors"]], "correct_individual_error() (qkd_key_rate.base.receiver.receiverbase method)": [[10, "qkd_key_rate.base.receiver.ReceiverBase.correct_individual_error"]], "qkd_key_rate.base.receiver": [[10, "module-qkd_key_rate.base.receiver"]], "schedule (class in qkd_key_rate.base.schedule)": [[11, "qkd_key_rate.base.schedule.Schedule"]], "next_pass() (qkd_key_rate.base.schedule.schedule method)": [[11, "qkd_key_rate.base.schedule.Schedule.next_pass"]], "qkd_key_rate.base.schedule": [[11, "module-qkd_key_rate.base.schedule"]], "remaining_passes (qkd_key_rate.base.schedule.schedule property)": [[11, "qkd_key_rate.base.schedule.Schedule.remaining_passes"]], "schedule_from_error_rate() (qkd_key_rate.base.schedule.schedule class method)": [[11, "qkd_key_rate.base.schedule.Schedule.schedule_from_error_rate"]], "senderbase (class in qkd_key_rate.base.sender)": [[12, "qkd_key_rate.base.sender.SenderBase"]], "__init__() (qkd_key_rate.base.sender.senderbase method)": [[12, "qkd_key_rate.base.sender.SenderBase.__init__"]], "message (qkd_key_rate.base.sender.senderbase property)": [[12, "qkd_key_rate.base.sender.SenderBase.message"]], "original_message (qkd_key_rate.base.sender.senderbase property)": [[12, "qkd_key_rate.base.sender.SenderBase.original_message"]], "qkd_key_rate.base.sender": [[12, "module-qkd_key_rate.base.sender"]], "qkd_key_rate.protocols": [[13, "module-qkd_key_rate.protocols"]], "cascadecorrector (class in qkd_key_rate.protocols.classical)": [[14, "qkd_key_rate.protocols.classical.CascadeCorrector"]], "cascadereceiver (class in qkd_key_rate.protocols.classical)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver"]], "cascadesender (class in qkd_key_rate.protocols.classical)": [[14, "qkd_key_rate.protocols.classical.CascadeSender"]], "privacyamplification (class in qkd_key_rate.protocols.classical)": [[14, "qkd_key_rate.protocols.classical.PrivacyAmplification"]], "winnowcorrector (class in qkd_key_rate.protocols.classical)": [[14, "qkd_key_rate.protocols.classical.WinnowCorrector"]], "winnowreceiver (class in qkd_key_rate.protocols.classical)": [[14, "qkd_key_rate.protocols.classical.WinnowReceiver"]], "winnowsender (class in qkd_key_rate.protocols.classical)": [[14, "qkd_key_rate.protocols.classical.WinnowSender"]], "__init__() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.__init__"]], "__init__() (qkd_key_rate.protocols.classical.cascadesender method)": [[14, "qkd_key_rate.protocols.classical.CascadeSender.__init__"]], "__init__() (qkd_key_rate.protocols.classical.privacyamplification method)": [[14, "qkd_key_rate.protocols.classical.PrivacyAmplification.__init__"]], "__init__() (qkd_key_rate.protocols.classical.winnowreceiver method)": [[14, "qkd_key_rate.protocols.classical.WinnowReceiver.__init__"]], "__init__() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.__init__"]], "build_parity_string() (qkd_key_rate.protocols.classical.cascadesender method)": [[14, "qkd_key_rate.protocols.classical.CascadeSender.build_parity_string"]], "build_parity_string() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.build_parity_string"]], "build_syndrome_string() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.build_syndrome_string"]], "check_match_of_parities() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.check_match_of_parities"]], "correct_errors() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.correct_errors"]], "correct_errors() (qkd_key_rate.protocols.classical.winnowreceiver method)": [[14, "qkd_key_rate.protocols.classical.WinnowReceiver.correct_errors"]], "create_parity_check_matrix() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.create_parity_check_matrix"]], "disagreeing_block_parities() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.disagreeing_block_parities"]], "discard_parity_bits() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.discard_parity_bits"]], "discard_syndrome_bits() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.discard_syndrome_bits"]], "do_cascade() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.do_cascade"]], "do_hash() (qkd_key_rate.protocols.classical.privacyamplification method)": [[14, "qkd_key_rate.protocols.classical.PrivacyAmplification.do_hash"]], "first_pass() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.first_pass"]], "fix_errors_with_syndrome() (qkd_key_rate.protocols.classical.winnowreceiver method)": [[14, "qkd_key_rate.protocols.classical.WinnowReceiver.fix_errors_with_syndrome"]], "get_block_index() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.get_block_index"]], "get_entropy_estimate() (qkd_key_rate.protocols.classical.privacyamplification method)": [[14, "qkd_key_rate.protocols.classical.PrivacyAmplification.get_entropy_estimate"]], "get_error_index() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.get_error_index"]], "get_error_rate() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.get_error_rate"]], "get_parity() (qkd_key_rate.protocols.classical.cascadesender method)": [[14, "qkd_key_rate.protocols.classical.CascadeSender.get_parity"]], "get_parity() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.get_parity"]], "get_prior_error_rate() (qkd_key_rate.protocols.classical.cascadereceiver method)": [[14, "qkd_key_rate.protocols.classical.CascadeReceiver.get_prior_error_rate"]], "get_syndrome() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.get_syndrome"]], "next_pass() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.next_pass"]], "permute_buffer() (qkd_key_rate.protocols.classical.winnowsender method)": [[14, "qkd_key_rate.protocols.classical.WinnowSender.permute_buffer"]], "qkd_key_rate.protocols.classical": [[14, "module-qkd_key_rate.protocols.classical"]], "summary() (qkd_key_rate.protocols.classical.cascadecorrector method)": [[14, "qkd_key_rate.protocols.classical.CascadeCorrector.summary"]], "summary() (qkd_key_rate.protocols.classical.winnowcorrector method)": [[14, "qkd_key_rate.protocols.classical.WinnowCorrector.summary"]], "cascadecorrector (class in qkd_key_rate.protocols.classical.cascade)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeCorrector"]], "cascadecorrectoroutput (class in qkd_key_rate.protocols.classical.cascade)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeCorrectorOutput"]], "cascadereceiver (class in qkd_key_rate.protocols.classical.cascade)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver"]], "cascadesender (class in qkd_key_rate.protocols.classical.cascade)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeSender"]], "__init__() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.__init__"]], "__init__() (qkd_key_rate.protocols.classical.cascade.cascadesender method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeSender.__init__"]], "build_parity_string() (qkd_key_rate.protocols.classical.cascade.cascadesender method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeSender.build_parity_string"]], "check_match_of_parities() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.check_match_of_parities"]], "correct_errors() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.correct_errors"]], "do_cascade() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.do_cascade"]], "get_block_index() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.get_block_index"]], "get_error_index() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.get_error_index"]], "get_error_rate() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.get_error_rate"]], "get_parity() (qkd_key_rate.protocols.classical.cascade.cascadesender method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeSender.get_parity"]], "get_prior_error_rate() (qkd_key_rate.protocols.classical.cascade.cascadereceiver method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeReceiver.get_prior_error_rate"]], "number_of_passes (qkd_key_rate.protocols.classical.cascade.cascadecorrectoroutput attribute)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeCorrectorOutput.number_of_passes"]], "qkd_key_rate.protocols.classical.cascade": [[15, "module-qkd_key_rate.protocols.classical.cascade"]], "sampling_fraction (qkd_key_rate.protocols.classical.cascade.cascadecorrectoroutput attribute)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeCorrectorOutput.sampling_fraction"]], "summary() (qkd_key_rate.protocols.classical.cascade.cascadecorrector method)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeCorrector.summary"]], "switch_after_pass (qkd_key_rate.protocols.classical.cascade.cascadecorrectoroutput attribute)": [[15, "qkd_key_rate.protocols.classical.cascade.CascadeCorrectorOutput.switch_after_pass"]], "privacyamplification (class in qkd_key_rate.protocols.classical.privacy_amplification)": [[16, "qkd_key_rate.protocols.classical.privacy_amplification.PrivacyAmplification"]], "__init__() (qkd_key_rate.protocols.classical.privacy_amplification.privacyamplification method)": [[16, "qkd_key_rate.protocols.classical.privacy_amplification.PrivacyAmplification.__init__"]], "do_hash() (qkd_key_rate.protocols.classical.privacy_amplification.privacyamplification method)": [[16, "qkd_key_rate.protocols.classical.privacy_amplification.PrivacyAmplification.do_hash"]], "get_entropy_estimate() (qkd_key_rate.protocols.classical.privacy_amplification.privacyamplification method)": [[16, "qkd_key_rate.protocols.classical.privacy_amplification.PrivacyAmplification.get_entropy_estimate"]], "qkd_key_rate.protocols.classical.privacy_amplification": [[16, "module-qkd_key_rate.protocols.classical.privacy_amplification"]], "winnowcorrector (class in qkd_key_rate.protocols.classical.winnow)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowCorrector"]], "winnowcorrectoroutput (class in qkd_key_rate.protocols.classical.winnow)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowCorrectorOutput"]], "winnowreceiver (class in qkd_key_rate.protocols.classical.winnow)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowReceiver"]], "winnowsender (class in qkd_key_rate.protocols.classical.winnow)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender"]], "__init__() (qkd_key_rate.protocols.classical.winnow.winnowreceiver method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowReceiver.__init__"]], "__init__() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.__init__"]], "build_parity_string() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.build_parity_string"]], "build_syndrome_string() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.build_syndrome_string"]], "correct_errors() (qkd_key_rate.protocols.classical.winnow.winnowreceiver method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowReceiver.correct_errors"]], "create_parity_check_matrix() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.create_parity_check_matrix"]], "disagreeing_block_parities() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.disagreeing_block_parities"]], "discard_parity_bits() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.discard_parity_bits"]], "discard_syndrome_bits() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.discard_syndrome_bits"]], "first_pass() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.first_pass"]], "fix_errors_with_syndrome() (qkd_key_rate.protocols.classical.winnow.winnowreceiver method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowReceiver.fix_errors_with_syndrome"]], "get_parity() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.get_parity"]], "get_syndrome() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.get_syndrome"]], "next_pass() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.next_pass"]], "permute_buffer() (qkd_key_rate.protocols.classical.winnow.winnowsender method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowSender.permute_buffer"]], "qkd_key_rate.protocols.classical.winnow": [[17, "module-qkd_key_rate.protocols.classical.winnow"]], "schedule (qkd_key_rate.protocols.classical.winnow.winnowcorrectoroutput attribute)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowCorrectorOutput.schedule"]], "summary() (qkd_key_rate.protocols.classical.winnow.winnowcorrector method)": [[17, "qkd_key_rate.protocols.classical.winnow.WinnowCorrector.summary"]], "bb84asymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum)": [[18, "qkd_key_rate.protocols.quantum.BB84AsymptoticKeyRateEstimate"]], "bb84finitekeyrateestimate (class in qkd_key_rate.protocols.quantum)": [[18, "qkd_key_rate.protocols.quantum.BB84FiniteKeyRateEstimate"]], "bb84fullyasymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum)": [[18, "qkd_key_rate.protocols.quantum.BB84FullyAsymptoticKeyRateEstimate"]], "bb84singleasymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum)": [[18, "qkd_key_rate.protocols.quantum.BB84SingleAsymptoticKeyRateEstimate"]], "bbm92asymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum)": [[18, "qkd_key_rate.protocols.quantum.BBM92AsymptoticKeyRateEstimate"]], "bbm92finitekeyrateestimate (class in qkd_key_rate.protocols.quantum)": [[18, "qkd_key_rate.protocols.quantum.BBM92FiniteKeyRateEstimate"]], "__init__() (qkd_key_rate.protocols.quantum.bb84asymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84AsymptoticKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bb84finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84FiniteKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bb84fullyasymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84FullyAsymptoticKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bb84singleasymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84SingleAsymptoticKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bbm92asymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BBM92AsymptoticKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bbm92finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BBM92FiniteKeyRateEstimate.__init__"]], "compute_last_positive_distance() (qkd_key_rate.protocols.quantum.bb84asymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84AsymptoticKeyRateEstimate.compute_last_positive_distance"]], "compute_last_positive_distance() (qkd_key_rate.protocols.quantum.bb84finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84FiniteKeyRateEstimate.compute_last_positive_distance"]], "compute_last_positive_distance() (qkd_key_rate.protocols.quantum.bbm92finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BBM92FiniteKeyRateEstimate.compute_last_positive_distance"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84asymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84FiniteKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84fullyasymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84FullyAsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84singleasymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84SingleAsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bbm92asymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BBM92AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bbm92finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BBM92FiniteKeyRateEstimate.compute_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84asymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84AsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84FiniteKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84fullyasymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84FullyAsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84singleasymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BB84SingleAsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bbm92asymptotickeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BBM92AsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bbm92finitekeyrateestimate method)": [[18, "qkd_key_rate.protocols.quantum.BBM92FiniteKeyRateEstimate.optimize_rate"]], "qkd_key_rate.protocols.quantum": [[18, "module-qkd_key_rate.protocols.quantum"]], "bb84asymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84AsymptoticKeyRateEstimate"]], "bb84finitekeyrateestimate (class in qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FiniteKeyRateEstimate"]], "bb84fullyasymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate"]], "optimizationerror": [[19, "qkd_key_rate.protocols.quantum.bb84.OptimizationError"]], "__init__() (qkd_key_rate.protocols.quantum.bb84.bb84asymptotickeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84AsymptoticKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bb84.bb84finitekeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FiniteKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bb84.bb84fullyasymptotickeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate.__init__"]], "bound_f() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.bound_f"]], "compute_gain_and_error_rate() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.compute_gain_and_error_rate"]], "compute_last_positive_distance() (qkd_key_rate.protocols.quantum.bb84.bb84asymptotickeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84AsymptoticKeyRateEstimate.compute_last_positive_distance"]], "compute_last_positive_distance() (qkd_key_rate.protocols.quantum.bb84.bb84finitekeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FiniteKeyRateEstimate.compute_last_positive_distance"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84.bb84asymptotickeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84.bb84finitekeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FiniteKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84.bb84fullyasymptotickeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate.compute_rate"]], "delta() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.delta"]], "delta_ec() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.delta_ec"]], "ensure_probability() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.ensure_probability"]], "lower_bound_matrix_gain() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.lower_bound_matrix_gain"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84.bb84asymptotickeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84AsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84.bb84finitekeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FiniteKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84.bb84fullyasymptotickeyrateestimate method)": [[19, "qkd_key_rate.protocols.quantum.bb84.BB84FullyAsymptoticKeyRateEstimate.optimize_rate"]], "qkd_key_rate.protocols.quantum.bb84": [[19, "module-qkd_key_rate.protocols.quantum.bb84"]], "solve_finite_lp() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.solve_finite_lp"]], "solve_lp() (in module qkd_key_rate.protocols.quantum.bb84)": [[19, "qkd_key_rate.protocols.quantum.bb84.solve_lp"]], "bb84singleasymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum.bb84_single_photon)": [[20, "qkd_key_rate.protocols.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate"]], "__init__() (qkd_key_rate.protocols.quantum.bb84_single_photon.bb84singleasymptotickeyrateestimate method)": [[20, "qkd_key_rate.protocols.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate.__init__"]], "compute_gain_and_error_rate() (in module qkd_key_rate.protocols.quantum.bb84_single_photon)": [[20, "qkd_key_rate.protocols.quantum.bb84_single_photon.compute_gain_and_error_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bb84_single_photon.bb84singleasymptotickeyrateestimate method)": [[20, "qkd_key_rate.protocols.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate.compute_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bb84_single_photon.bb84singleasymptotickeyrateestimate method)": [[20, "qkd_key_rate.protocols.quantum.bb84_single_photon.BB84SingleAsymptoticKeyRateEstimate.optimize_rate"]], "qkd_key_rate.protocols.quantum.bb84_single_photon": [[20, "module-qkd_key_rate.protocols.quantum.bb84_single_photon"]], "bbm92asymptotickeyrateestimate (class in qkd_key_rate.protocols.quantum.bbm92)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92AsymptoticKeyRateEstimate"]], "bbm92finitekeyrateestimate (class in qkd_key_rate.protocols.quantum.bbm92)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92FiniteKeyRateEstimate"]], "__init__() (qkd_key_rate.protocols.quantum.bbm92.bbm92asymptotickeyrateestimate method)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92AsymptoticKeyRateEstimate.__init__"]], "__init__() (qkd_key_rate.protocols.quantum.bbm92.bbm92finitekeyrateestimate method)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92FiniteKeyRateEstimate.__init__"]], "compute_gain_and_error_rate() (in module qkd_key_rate.protocols.quantum.bbm92)": [[21, "qkd_key_rate.protocols.quantum.bbm92.compute_gain_and_error_rate"]], "compute_last_positive_distance() (qkd_key_rate.protocols.quantum.bbm92.bbm92finitekeyrateestimate method)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92FiniteKeyRateEstimate.compute_last_positive_distance"]], "compute_rate() (qkd_key_rate.protocols.quantum.bbm92.bbm92asymptotickeyrateestimate method)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92AsymptoticKeyRateEstimate.compute_rate"]], "compute_rate() (qkd_key_rate.protocols.quantum.bbm92.bbm92finitekeyrateestimate method)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92FiniteKeyRateEstimate.compute_rate"]], "delta() (in module qkd_key_rate.protocols.quantum.bbm92)": [[21, "qkd_key_rate.protocols.quantum.bbm92.delta"]], "efficiency_channel() (in module qkd_key_rate.protocols.quantum.bbm92)": [[21, "qkd_key_rate.protocols.quantum.bbm92.efficiency_channel"]], "efficiency_system() (in module qkd_key_rate.protocols.quantum.bbm92)": [[21, "qkd_key_rate.protocols.quantum.bbm92.efficiency_system"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bbm92.bbm92asymptotickeyrateestimate method)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92AsymptoticKeyRateEstimate.optimize_rate"]], "optimize_rate() (qkd_key_rate.protocols.quantum.bbm92.bbm92finitekeyrateestimate method)": [[21, "qkd_key_rate.protocols.quantum.bbm92.BBM92FiniteKeyRateEstimate.optimize_rate"]], "qkd_key_rate.protocols.quantum.bbm92": [[21, "module-qkd_key_rate.protocols.quantum.bbm92"]], "binary_entropy() (in module qkd_key_rate.utils)": [[22, "qkd_key_rate.utils.binary_entropy"]], "one_minus_binary_entropy() (in module qkd_key_rate.utils)": [[22, "qkd_key_rate.utils.one_minus_binary_entropy"]], "qkd_key_rate.utils": [[22, "module-qkd_key_rate.utils"]], "binary_entropy() (in module qkd_key_rate.utils.entropy)": [[23, "qkd_key_rate.utils.entropy.binary_entropy"]], "one_minus_binary_entropy() (in module qkd_key_rate.utils.entropy)": [[23, "qkd_key_rate.utils.entropy.one_minus_binary_entropy"]], "qkd_key_rate.utils.entropy": [[23, "module-qkd_key_rate.utils.entropy"]], "get_efficiency() (in module qkd_key_rate.utils.required_linktime)": [[24, "qkd_key_rate.utils.required_linktime.get_efficiency"]], "get_estimate_on_communication() (in module qkd_key_rate.utils.required_linktime)": [[24, "qkd_key_rate.utils.required_linktime.get_estimate_on_communication"]], "qkd_key_rate.utils.required_linktime": [[24, "module-qkd_key_rate.utils.required_linktime"]]}})